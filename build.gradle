plugins {
    id 'java'
    id 'maven-publish'
}

group = 'de.lyriaserver'
version = '1.2'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'codemc'
        url 'https://repo.codemc.io/repository/maven-releases/'
    }
    maven {
        name = 'jitpack'
        url 'https://jitpack.io'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifactId = 'lyrianische-kartenspiele'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Olfi01/LyrianischeKartenspiele"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

    }
}

dependencies {
    testCompileOnly 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT'
    compileOnly 'xyz.janboerman:GuiLib-Plugin:1.11.9'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
    options.encoding = 'UTF-8'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('cleanOldVersions', Delete) {
    delete fileTree(project.findProperty('local_plugin_path')) {
        include "${jar.archiveBaseName.get()}*.jar"
    }
}

tasks.register('deployForTest', Copy) {
    from jar.outputs
    into project.findProperty('local_plugin_path')
    dependsOn jar
    dependsOn cleanOldVersions
}
